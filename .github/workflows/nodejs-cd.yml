name: Node.js CD

on:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
        default: '22.13.1'
      build-command:
        required: false
        type: string
        default: 'npm run build'
      install-command:
        required: false
        type: string
        default: 'npm install'
      dockerfile-path:
        required: false
        type: string
        default: './Dockerfile'
      docker-context:
        required: false
        type: string
        default: '.'
      docker-image-name:
        required: true
        type: string
      docker-tag:
        required: false
        type: string
        default: 'latest'
      registry-url:
        required: false
        type: string
        default: 'ghcr.io'
      environment:
        required: false
        type: string
        default: 'production'
      health-check-url:
        required: false
        type: string
        default: ''
      health-check-timeout:
        required: false
        type: string
        default: '300'
      gcp-project-id:
        required: true
        type: string
      gcp-region:
        required: false
        type: string
        default: 'europe-west1'
      cloud-run-service-name:
        required: true
        type: string
      cloud-run-port:
        required: false
        type: string
        default: '8080'
      cloud-run-memory:
        required: false
        type: string
        default: '512Mi'
      cloud-run-cpu:
        required: false
        type: string
        default: '1'
      cloud-run-max-instances:
        required: false
        type: string
        default: '10'
      gcp-sa-key:
        required: true
        type: string
      registry-token:
        required: true
        type: string
      database-url:
        required: false
        type: string
        default: ''
      jwt-secret:
        required: false
        type: string
        default: ''
      api-key:
        required: false
        type: string
        default: ''

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install dependencies
        run: ${{ inputs.install-command }}

      - name: Build application
        run: ${{ inputs.build-command }}

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ inputs.registry-url }}
          username: ${{ github.actor }}
          password: ${{ inputs.registry-token }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ inputs.registry-url }}/${{ github.repository }}/${{ inputs.docker-image-name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=${{ inputs.docker-tag }},enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.docker-context }}
          file: ${{ inputs.dockerfile-path }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always() && needs.build-and-push.result == 'success'
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ inputs.gcp-sa-key }}
          project_id: ${{ inputs.gcp-project-id }}

      - name: Configure Docker for GCR
        run: gcloud auth configure-docker

      - name: Deploy to Cloud Run
        run: |
          echo "🚀 Deploying to Cloud Run..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tags }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          
          # Get the first tag from the image tags
          IMAGE_TAG=$(echo "${{ needs.build-and-push.outputs.image-tags }}" | head -n1)
          
          # Build environment variables string
          ENV_VARS=""
          if [ -n "${{ inputs.database-url }}" ]; then
            ENV_VARS="$ENV_VARS --set-env-vars DATABASE_URL=${{ inputs.database-url }}"
          fi
          if [ -n "${{ inputs.jwt-secret }}" ]; then
            ENV_VARS="$ENV_VARS --set-env-vars JWT_SECRET=${{ inputs.jwt-secret }}"
          fi
          if [ -n "${{ inputs.api-key }}" ]; then
            ENV_VARS="$ENV_VARS --set-env-vars API_KEY=${{ inputs.api-key }}"
          fi
          
          # Deploy to Cloud Run
          gcloud run deploy ${{ inputs.cloud-run-service-name }} \
            --image=$IMAGE_TAG \
            --platform=managed \
            --region=${{ inputs.gcp-region }} \
            --port=${{ inputs.cloud-run-port }} \
            --memory=${{ inputs.cloud-run-memory }} \
            --cpu=${{ inputs.cloud-run-cpu }} \
            --max-instances=${{ inputs.cloud-run-max-instances }} \
            --allow-unauthenticated \
            $ENV_VARS \
            --quiet

      - name: Health Check
        if: inputs.health-check-url != ''
        run: |
          echo "🔍 Running health check..."
          timeout ${{ inputs.health-check-timeout }} bash -c '
            until curl -f "${{ inputs.health-check-url }}" > /dev/null 2>&1; do
              echo "Waiting for service to be ready..."
              sleep 10
            done
            echo "✅ Health check passed"
          '

      - name: Deployment Summary
        run: |
          echo "✅ Deployment completed successfully"
          echo "Environment: ${{ inputs.environment }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tags }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
