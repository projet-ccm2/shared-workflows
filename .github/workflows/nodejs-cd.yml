name: Node.js CD

on:
  workflow_call:
    inputs:
      node-version:
        required: false
        type: string
        default: '22.13.1'
      build-command:
        required: false
        type: string
        default: 'npm run build'
      install-command:
        required: false
        type: string
        default: 'npm install'
      dockerfile-path:
        required: false
        type: string
        default: './Dockerfile'
      docker-context:
        required: false
        type: string
        default: '.'
      docker-image-name:
        required: true
        type: string
      docker-tag:
        required: false
        type: string
        default: 'latest'
      registry-url:
        required: false
        type: string
        default: 'europe-west1-docker.pkg.dev'
      environment:
        required: false
        type: string
        default: 'production'
      health-check-url:
        required: false
        type: string
        default: ''
      health-check-timeout:
        required: false
        type: string
        default: '300'
      gcp-region:
        required: false
        type: string
        default: 'europe-west1'
      cloud-run-service-name:
        required: true
        type: string
      cloud-run-port:
        required: false
        type: string
        default: '8080'
      cloud-run-memory:
        required: false
        type: string
        default: '512Mi'
      cloud-run-cpu:
        required: false
        type: string
        default: '1'
      cloud-run-max-instances:
        required: false
        type: string
        default: '10'
      artifact-registry-repository:
        required: true
        type: string
    secrets:
      GCP_SA_KEY:
        required: true
      GCP_PROJECT_ID:
        required: true
      HEALTH_CHECK_URL:
        required: true
      DATABASE_URL:
        required: false

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.image-info.outputs.tags }}
      image-base: ${{ steps.image-info.outputs.image-base }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}

      - name: Install dependencies
        run: ${{ inputs.install-command }}

      - name: Build application
        run: ${{ inputs.build-command }}

      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ inputs.registry-url }}

      - name: Set image path and tags
        id: image-info
        run: |
          # Debug: Show original registry-url
          echo "Original registry-url: '${{ inputs.registry-url }}'"
          
          # Remove ALL trailing slashes from registry-url using sed
          REGISTRY_URL=$(echo "${{ inputs.registry-url }}" | sed 's:/*$::')
          echo "Cleaned registry-url: '$REGISTRY_URL'"
          
          # Build base image path
          IMAGE_BASE="$REGISTRY_URL/${{ secrets.GCP_PROJECT_ID }}/${{ inputs.artifact-registry-repository }}/${{ inputs.docker-image-name }}"
          echo "Final image base: '$IMAGE_BASE'"
          echo "image-base=$IMAGE_BASE" >> $GITHUB_OUTPUT
          
          # Generate tags
          BRANCH_NAME="${{ github.ref_name }}"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          
          # Build tags array
          TAGS="$IMAGE_BASE:$BRANCH_NAME"
          TAGS="$TAGS,$IMAGE_BASE:$BRANCH_NAME-$SHORT_SHA"
          
          # Add custom tag if on default branch
          if [[ "$BRANCH_NAME" == "${{ github.event.repository.default_branch }}" ]]; then
            TAGS="$TAGS,$IMAGE_BASE:${{ inputs.docker-tag }}"
          fi
          
          echo "tags=$TAGS" >> $GITHUB_OUTPUT
          echo "Generated tags: $TAGS"

      - name: Build and push Docker image
        id: build
        run: |
          echo "=== DEBUG INFO ==="
          echo "Original registry-url: '${{ inputs.registry-url }}'"
          echo "GCP_PROJECT_ID: '${{ secrets.GCP_PROJECT_ID }}'"
          echo "artifact-registry-repository: '${{ inputs.artifact-registry-repository }}'"
          echo "docker-image-name: '${{ inputs.docker-image-name }}'"
          
          # Get cleaned registry URL
          REGISTRY_URL=$(echo "${{ inputs.registry-url }}" | sed 's:/*$::')
          echo "Cleaned registry-url: '$REGISTRY_URL'"
          
          IMAGE_BASE="$REGISTRY_URL/${{ secrets.GCP_PROJECT_ID }}/${{ inputs.artifact-registry-repository }}/${{ inputs.docker-image-name }}"
          echo "Final image base: '$IMAGE_BASE'"
          
          # Generate tags
          BRANCH_NAME="${{ github.ref_name }}"
          COMMIT_SHA="${{ github.sha }}"
          SHORT_SHA="${COMMIT_SHA:0:7}"
          
          # Build tags array
          TAGS="$IMAGE_BASE:$BRANCH_NAME"
          TAGS="$TAGS,$IMAGE_BASE:$BRANCH_NAME-$SHORT_SHA"
          
          # Add custom tag if on default branch
          if [[ "$BRANCH_NAME" == "${{ github.event.repository.default_branch }}" ]]; then
            TAGS="$TAGS,$IMAGE_BASE:${{ inputs.docker-tag }}"
          fi
          
          echo "Building with tags: $TAGS"
          echo "=================="
          
          # Build and push using docker buildx directly
          docker buildx build \
            --file ${{ inputs.dockerfile-path }} \
            --push \
            --tag $IMAGE_BASE:$BRANCH_NAME \
            --tag $IMAGE_BASE:$BRANCH_NAME-$SHORT_SHA \
            ${{ inputs.docker-context }}

  deploy:
    name: Deploy to Cloud Run
    runs-on: ubuntu-latest
    needs: build-and-push
    if: always() && needs.build-and-push.result == 'success'
    steps:
      - name: Setup Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy to Cloud Run
        run: |
          echo "üöÄ Deploying to Cloud Run..."
          echo "Image: ${{ needs.build-and-push.outputs.image-tags }}"
          echo "Digest: ${{ needs.build-and-push.outputs.image-digest }}"
          
          # Get the first tag from the image tags
          IMAGE_TAG=$(echo "${{ needs.build-and-push.outputs.image-tags }}" | head -n1)
          
          # Build environment variables string
          ENV_VARS=""
          if [ -n "${{ secrets.DATABASE_URL }}" ]; then
            ENV_VARS="$ENV_VARS --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }}"
          fi
          
          # Deploy to Cloud Run
          gcloud run deploy ${{ inputs.cloud-run-service-name }} \
            --image=$IMAGE_TAG \
            --platform=managed \
            --region=${{ inputs.gcp-region }} \
            --port=${{ inputs.cloud-run-port }} \
            --memory=${{ inputs.cloud-run-memory }} \
            --cpu=${{ inputs.cloud-run-cpu }} \
            --max-instances=${{ inputs.cloud-run-max-instances }} \
            --allow-unauthenticated \
            $ENV_VARS \
            --quiet

      - name: Health Check
        run: |
          if [ -n "${{ secrets.HEALTH_CHECK_URL }}" ]; then
            echo "üîç Running health check..."
            timeout ${{ inputs.health-check-timeout }} bash -c '
              until curl -f "${{ secrets.HEALTH_CHECK_URL }}" > /dev/null 2>&1; do
                echo "Waiting for service to be ready..."
                sleep 10
              done
              echo "‚úÖ Health check passed"
            '
          else
            echo "‚ö†Ô∏è No health check URL provided, skipping health check"
          fi

      - name: Deployment Summary
        run: |
          echo "‚úÖ Deployment completed successfully"
          echo "Environment: ${{ inputs.environment }}"
          echo "Image: ${{ needs.build-and-push.outputs.image-tags }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
